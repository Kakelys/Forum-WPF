<Application x:Class="FoxLife.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:FoxLife"
             StartupUri="View/MainView.xaml"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:htmlTextBlock="http://www.quickzip.org/UserControls"
             xmlns:classes="clr-namespace:FoxLife.View.Classes"
             >

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Dark" PrimaryColor="Grey" SecondaryColor="Lime" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="Resources/lang.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type htmlTextBlock:HtmlTextBlock}" >
                <Style.Setters>
                    <Setter Property="FontFamily" Value="Arial"/>
                    <Setter Property="FontSize" Value="16"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                </Style.Setters>
            </Style>

            <Style TargetType="{x:Type ComboBox}" x:Key="Languages" BasedOn="{StaticResource MaterialDesignFilledComboBox}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Cursor" Value="Hand"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type TextBlock}">
            <Style.Setters>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="FontFamily" Value="Arial"/>
            </Style.Setters>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Style.Setters>
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="#303030"/>
            </Style.Setters>
        </Style>
        <!--look like link when mouse over-->
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}" x:Key="Link">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="FontWeight" Value="Medium"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="TextDecorations" Value="Underline"/>
                    <Setter Property="Foreground" Value="NavajoWhite" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}" x:Key="ComboSelect">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>
            </Style.Triggers>
        </Style>
            <Style TargetType="{x:Type Run}" x:Key="LinkRun">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="FontWeight" Value="Medium"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="TextDecorations" Value="Underline"/>
                    <Setter Property="Foreground" Value="NavajoWhite" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="PostDots" TargetType="{x:Type Button}">
            <Style.Setters>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="3">
                                    <ContentPresenter x:Name="PostDotsContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"  />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#212121" TargetName="Border" />
                                        <Setter Property="Cursor" Value="Hand"/>
                                        <Setter TargetName="PostDotsContentPresenter" Property="materialDesign:PackIcon.Foreground" Value="Black" />
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#303030"  TargetName="Border"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style.Setters>
        </Style>

        <Style x:Key="AdditionalMenuButton" TargetType="{x:Type Button}">
            <Style.Setters>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="3">
                                <ContentPresenter x:Name="PostDotsContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"  />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#505050" TargetName="Border" />
                                    <Setter Property="Cursor" Value="Hand"/>
                                    <Setter TargetName="PostDotsContentPresenter" Property="materialDesign:PackIcon.Foreground" Value="Black" />
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                        <Setter Property="Background" Value="#505050" TargetName="Border" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#626262"  TargetName="Border"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>
            <Style TargetType="{x:Type Button}" x:Key="SimpleButtonG" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#424242" TargetName="Border" />
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#606060"  TargetName="Border"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TextBox}">
            <Style.Setters>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="FontSize" Value="16"/>
                    <Setter Property="FontFamily" Value="Arial"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="CaretBrush" Value="White"/>
                <Setter Property="SelectionBrush" Value="#424242"/>
            </Style.Setters>
        </Style>

        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="SimpleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                        </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#424242" TargetName="Border" />
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" Value="#424242" TargetName="Border" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#606060"  TargetName="Border"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="ButtonNoStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" Background="Transparent" >
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="SimpleButtonLight">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#212121" TargetName="Border" />
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" Value="#212121" TargetName="Border" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#303030"  TargetName="Border"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonNoStyle}" x:Key="CloseMessageButton">
            <Setter Property="Width" Value="15" />
            <Setter Property="Margin" Value="0,0,5,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Border" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <materialDesign:PackIcon x:Name="Icon" Kind="WindowClose" Foreground="White" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True" >
                                <Setter TargetName="Icon" Property="Foreground" Value="Red" />
                                <Setter Property="Cursor" Value="Hand"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

            <Style x:Key="Message" TargetType="{x:Type UserControl}">
                <Setter Property="Margin" Value="0,2" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border x:Name="Wrapper" Background="Transparent">
                            <Border CornerRadius="5"
                                    Background="{Binding Background}" x:Name="Message">
                                <StackPanel Orientation="Horizontal">
                                    <htmlTextBlock:HtmlTextBlock  Margin="5" Foreground="White" FontFamily="Arial" FontSize="13" Opacity="0.9"
                                                                 Html="{Binding Message}"
                                    />
                                    <Button
                                            x:Name="Close"
                                            Visibility="Collapsed"
                                            Style="{StaticResource CloseMessageButton}" 
                                            Command="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.MessageRemoveCommand}"
                                            CommandParameter="{Binding Id}"
                                            VerticalAlignment="Top"
                                    />
                                </StackPanel>
                            </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Close" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard  >
                                        <Storyboard AutoReverse="False">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Message" Storyboard.TargetProperty="(UIElement.Opacity)" BeginTime="0:0:0">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <DataTrigger Binding="{Binding StartDeleteAnimation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard   x:Name="beginAnimation">
                                            <Storyboard AutoReverse="False">
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Wrapper" Storyboard.TargetProperty="(UIElement.Opacity)" BeginTime="0:0:0">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="beginAnimation" />
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                
            </Style>

            <Style x:Key="PostTreeView" TargetType="{x:Type TreeView}">

            <Style.Resources>
                <Style TargetType="{x:Type TextBlock}" x:Key="ToggleText" BasedOn="{StaticResource Link}">
                    <Setter Property="FontSize" Value="16"/>
                    <Setter Property="Cursor" Value="Hand"/>
                </Style>
                <Style TargetType="TreeViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                        <Setter Property="Margin" Value="0,3" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="TreeViewItem">
                                    <StackPanel>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" MinWidth="20" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>

                                            <Border x:Name="Bd"
                                                    HorizontalAlignment="Stretch"
                                                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                                                    BorderBrush="{TemplateBinding Border.BorderBrush}"
                                                    Margin="0"
                                                    Padding="0"
                                                    Background="{TemplateBinding Panel.Background}"
                                                    SnapsToDevicePixels="True"
                                                    Grid.Column="1">
                                                <StackPanel>
                                                <ContentPresenter x:Name="PART_Header"
                                                                  Content="{TemplateBinding HeaderedContentControl.Header}"
                                                                  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                                                  ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                                                  ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                                                  ContentSource="Header"
                                                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                                    <Button Command="{Binding ToggleExpander}"
                                                            Margin="15,0,0,0"
                                                            Style="{StaticResource ButtonNoStyle}"
                                                            HorizontalAlignment="Left"
                                                            VerticalAlignment="Center"
                                                            BorderThickness="0"
                                                            
                                                            >
                                                        
                                                        <TextBlock Name="Expander"
                                                                   Style="{StaticResource ToggleText}"
                                                        />
                                                    </Button>
                                                    
                                                </StackPanel>
                                            </Border>
                                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                                        </Grid>
                                    </StackPanel>
                                    <ControlTemplate.Triggers>

                                        <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                                            <Setter TargetName="Expander" Property="Text" Value="{DynamicResource OpenTree}" />
                                        </Trigger>
                                        <Trigger Property="TreeViewItem.IsExpanded" Value="True">
                                            <Setter TargetName="Expander" Property="Text" Value="{DynamicResource CloseTree}" />
                                        </Trigger>

                                        <Trigger Property="ItemsControl.HasItems" Value="False">
                                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Collapsed" />
                                        </Trigger>
                                        <Trigger Property="ItemsControl.HasItems" Value="True">
                                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Visible" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
            </Style.Resources>
        </Style>



            <Style TargetType="{x:Type Button}" x:Key="CloseButton">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="5">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="IndianRed" TargetName="Border" />
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" Value="IndianRed" TargetName="Border" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
        </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
